---
import { ArrowOutward } from '@icons/ArrowOutward'
import { ArrowRight } from '@icons/ArrowRight'
import type { MarkdownHeading } from 'astro'
import type { InferEntrySchema } from 'astro:content'

import Image from '@/components/Image'
import Link, { LinkArticle } from '@/components/Link'
import SEO from '@/components/SEO.astro'
import TableOfContent from '@/components/TableOfContent'
import TopOverlay from '@/components/TopOverlay.astro'
import ScrollProgressBar from '@/components/ui/scroll-progress-bar'
import { BASE_URL } from '@/lib/baseUrl'
import { formatDateByTimeZone } from '@/lib/utils'

import BaseLayout from '../BaseLayout.astro'
import Links from '../components/Links.astro'

interface Props extends InferEntrySchema<'projects'> {
  headings: MarkdownHeading[]
  slug: string
}

const {
  year,
  description,
  heroImage,
  heroImageAlign,
  title,
  htmlTitle: _htmlTitle,
  headings,
  slug,
  updatedDate,
  latestCommitUrl,
  links
} = Astro.props

const htmlTitle = _htmlTitle.replace(
  '\\n',
  "<br class='max-md:hidden' /><span class='md:hidden'>&nbsp;</span>"
)
---

<BaseLayout class='!max-w-[1024px]'>
  <SEO
    title={title}
    description={description}
    imageUrl={`${BASE_URL}/api/og/${slug}`}
    type='article'
    slot='seo'
  />
  <slot name='head' slot='head' />
  <TopOverlay />
  <ScrollProgressBar
    className='bg-[var(--projectAccentColor)]'
    targetId='article'
    client:only='react'
  />

  <section class='mt-16 sm:mt-24 sm:font-light lg:mt-32'>
    <h2 class='text-zinc-400 sm:text-lg'>
      {year}
    </h2>
    <h1
      class='font-heading mt-4 text-[clamp(1.8rem,5vw,2.5rem)] font-bold leading-[1.25] sm:mt-6 md:leading-[1.1]'
      set:html={htmlTitle}
    />
    <h3 class='mt-4 text-zinc-400 max-sm:text-sm'>
      {description}
    </h3>
    {
      links.length > 0 && (
        <div class='mt-4 flex gap-4 max-sm:flex-col-reverse sm:mt-6 sm:items-center sm:justify-between'>
          <Links links={links} />
        </div>
      )
    }
  </section>

  <Image
    src={heroImage}
    alt={title}
    title={title}
    align={heroImageAlign}
    wrapperProps={{ class: 'rounded-lg mt-8 sm:mt-12' }}
    class='aspect-[1.5] w-full xs:aspect-[2]'
    ambientMode
  />

  <section class='mt-8 flex w-full gap-16 sm:mt-16'>
    <article
      id='article'
      class:list={[
        'prose prose-invert max-w-none max-sm:prose-sm',
        'prose-headings:font-display prose-headings:scroll-m-16 sm:prose-headings:scroll-m-24',
        'prose-a:article-link prose-a:text-[var(--projectAccentColor)]'
      ]}
    >
      <slot />
      {
        updatedDate && (
          <p class='!mt-8 text-zinc-500'>
            Last updated on {formatDateByTimeZone(updatedDate)} UTC+7.
            {latestCommitUrl && (
              <LinkArticle href={latestCommitUrl}>
                See Changelog{''}
                <ArrowOutward className='inline-block size-3 ml-1' />
              </LinkArticle>
            )}
          </p>
        )
      }
    </article>

    <aside class='w-60 shrink-0 space-y-8 max-lg:hidden'>
      <TableOfContent headings={headings} className='sticky top-32' />
    </aside>
  </section>

  <section class='mt-16'>
    <!-- <div class='mb-12 grid gap-6 max-lg:mx-auto md:grid-cols-2'>
      <MoreProjectCard {...Astro.props} />
      <MoreProjectCard {...Astro.props} />
    </div> -->
    <Link
      href='/projects'
      class='!text-zinc-200 !no-underline'
      styled
      hoverStyled
      hoverEffectOffsetStart='24px'
    >
      <ArrowRight className='mr-2 inline-block size-4 -scale-x-100' />Explore
      more projects</Link
    >
  </section>
</BaseLayout>

<style is:global define:vars={{ projectAccentColor: '#2dd4bf' }}>
  * {
    --projectAccentColor: theme(colors.zinc.200);
  }

  .article-heading > a {
    font-weight: 600;
    text-decoration: none;
    text-underline-offset: 0px;
    transition: all 150ms ease-in-out;
  }

  @media (max-width: 480px) {
    .article-heading > a {
      font-weight: 700;
    }
  }

  .article-heading > a:hover {
    text-decoration: underline !important;
    text-underline-offset: 2px !important;
  }

  .article-heading > a::after {
    content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 16 16'%3E%3Cpath fill='gray' fill-rule='evenodd' d='M7.238 2.634a.75.75 0 1 0-1.476-.268L5.283 5H3a.75.75 0 1 0 0 1.5h2.01l-.545 3H2A.75.75 0 1 0 2 11h2.192l-.43 2.366a.75.75 0 1 0 1.476.268L5.717 11h3.475l-.43 2.366a.75.75 0 1 0 1.476.268L10.717 11H13a.75.75 0 0 0 0-1.5h-2.01l.545-3H14A.75.75 0 0 0 14 5h-2.192l.43-2.366a.75.75 0 1 0-1.476-.268L10.283 5H6.808zM9.465 9.5l.545-3H6.535l-.545 3z' clip-rule='evenodd'/%3E%3C/svg%3E");
    display: inline-block;
    margin-left: 4px;
    height: 18px;
    vertical-align: text-top;

    transition: all 300ms ease-in-out;
    opacity: 0;
    margin-top: 6px;
  }

  .article-heading > a:hover::after {
    opacity: 1;
    margin-top: 2px;
  }

  .article-heading > a > svg {
    transition: all 200ms ease-in-out;
  }

  .article-heading > a:hover > svg {
    transform: scale(1.2);
  }

  h2 > a > svg,
  h3 > a > svg,
  h4 > a > svg {
    @apply mr-2.5 mt-[3px] inline-block size-[18px] align-text-top;
  }
</style>

<script>
  const handleHeadingIntersection = () => {
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: '0px 0px -85% 0px', // Adjust to make the top 20% of the viewport observe entries
      threshold: 0 // Trigger as soon as they enter the viewport
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return

        const id = entry.target.getAttribute('id')
        const link = document.querySelector(`li > a[href="#${id}"]`)
        const textStyle = 'text-zinc-300'

        document
          .querySelectorAll(`.${textStyle}`)
          .forEach((item) => item.classList.remove(textStyle))

        link?.classList.add(textStyle)
      })
    }, observerOptions)

    document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
      observer.observe(heading)
    })
  }

  document.addEventListener('astro:page-load', handleHeadingIntersection)
</script>
